✍️ Project Summary: MERN Notes Backend



📌 Purpose
I built this backend project to revise and strengthen my understanding of CRUD operations (Create, Read, Update, Delete) using modern tools and best practices. This project allowed me to practically apply what I learned in Express.js, MongoDB, routing, middleware, and controller logic — helping me revise in a structured and meaningful way.

✅ Why This Was the Best Way to Revise
Built from scratch for hands-on experience

Covers the entire flow of a real API with HTTP methods

Clean project structure like industry-level backend projects

Emphasized on code reusability, separation of concerns, and RESTful design

📁 File/Folder Summary and Key Code Snippets


🔹 config/db.js
Function: Connects to MongoDB using Mongoose.
import mongoose from 'mongoose';

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGO_URI);
    console.log(`MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error('MongoDB Connection Error:', error);
    process.exit(1);
  }
};

export default connectDB;
🔹 models/notesModel.js
Function: Defines schema for Notes.
import mongoose from 'mongoose';

const noteSchema = new mongoose.Schema({
  title: String,
  content: String,
}, { timestamps: true });

export default mongoose.model('Note', noteSchema);
🔹 controllers/notesController.js
Function: Handles logic for all note operations.

import Note from '../models/notesModel.js';

export const getAllNotes = async (req, res) => {
  const notes = await Note.find();
  res.status(200).json(notes);
};

export const createNote = async (req, res) => {
  const newNote = new Note(req.body);
  const saved = await newNote.save();
  res.status(201).json(saved);
};
🔹 routes/notesroute.js
Function: Defines routes for note-related requests.

import express from 'express';
import { getAllNotes, createNote } from '../controllers/notesController.js';

const router = express.Router();

router.get('/', getAllNotes);
router.post('/', createNote);

export default router;
🔹 src/server.js
Function: Entry point of the backend. Configures app and starts server.

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import connectDB from '../config/db.js';
import noteRoutes from '../routes/notesroute.js';

dotenv.config();
connectDB();

const app = express();

app.use(cors());
app.use(express.json());

app.use('/api/notes', noteRoutes);

const PORT = process.env.PORT || 8000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
🔹 .env
Function: Stores environment variables securely.

MONGO_URI=your_mongodb_connection_string
PORT=8000
💡 Reflection
By creating this project, I not only revised CRUD operations but also learned how to:

Structure a backend cleanly

Connect MongoDB with Mongoose

Handle RESTful routing

Use controller-service architecture

Secure environment variables

Make the backend ready to integrate with a frontend (like React)

This serves as a perfect boilerplate for any future MERN stack app.
